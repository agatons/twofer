syntax = "proto3";
package gw6n;

service WebAuthn {
    rpc BeginRegister (BeginRegisterRequest) returns (BeginRegisterResponse) {
    };
    rpc FinishRegister (FinishRegisterRequest) returns (FinishRegisterResponse) {
    };
    rpc BeginLogin (BeginLoginRequest) returns (BeginLoginResponse) {
    };
    rpc FinishLogin (FinishLoginRequest) returns (FinishLoginResponse) {
    };
}


//
//type WebAuthn struct {
//Enabled          bool   `env:"WEBAUTHN_ENABLED"`
//RPDisplayName    string `env:"WEBAUTHN_RP_DISPLAYNAME"`
//RPID             string `env:"WEBAUTHN_RP_ID"`
//RPOrigin         string `env:"WEBAUTHN_RP_ORIGIN"`
//HMACKey          string `env:"WEBAUTHN_HMAC_KEY"`
//UserVerification string `env:"WEBAUTHN_USER_VERIFICATION" envDefault:"discouraged"`
//}
//

message Config{
    string RPID = 1;
    string RPDisplayName = 2;
    string RPOrigin = 3;
    string UserVerification = 4;
}

message User {
    string id = 1;
    string name = 2;
}


message BeginRegisterRequest {
    User user = 1;
    bytes userBlob = 2;

    Config cfg = 3; // Optional, twofer default will be used otherwise
}

message BeginRegisterResponse {
    bytes session = 1;
    bytes json = 2;
}


message FinishRegisterRequest {
    bytes session = 1;
    bytes signature = 2;

    Config cfg = 3; // Optional, twofer default will be used otherwise
}
message FinishRegisterResponse {
    bytes userBlob = 1;
}


message BeginLoginRequest {
    bytes userBlob = 1;

    Config cfg = 2; // Optional, twofer default will be used otherwise
}
message BeginLoginResponse {
    bytes session = 1;
    bytes json = 2;
}


message FinishLoginRequest {
    bytes session = 1;
    bytes signature = 2;

    Config cfg = 3; // Optional, twofer default will be used otherwise
}
message FinishLoginResponse {
    bool valid = 1;
}



